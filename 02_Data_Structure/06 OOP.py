print("=== Python OOP (Object-Oriented Programming) ===\n")

print("1Ô∏è‚É£  What is OOP?")
print("  Object-Oriented Programming allows structuring code into classes and objects,")
print("  modeling real-world entities, promoting reusability, modularity, and maintainability.\n")

print("üîé  Key Concepts of OOP:")
print("  ‚Ä¢ Class: Blueprint for objects")
print("  ‚Ä¢ Object: Instance of a class")
print("  ‚Ä¢ Attributes: Data stored in objects (instance/class)")
print("  ‚Ä¢ Methods: Functions defined inside classes")
print("  ‚Ä¢ Inheritance: Reusing code from parent class")
print("  ‚Ä¢ Encapsulation: Hiding internal data")
print("  ‚Ä¢ Polymorphism: Using a single interface for multiple implementations\n")

print("üñ®Ô∏è  Creating a Class and Object")
class Person:
    '''Represents a person with name and age'''
    species = "Homo sapiens"  # class attribute, shared among all objects

    def __init__(self, name, age):
        '''Constructor to initialize instance attributes'''
        self.name = name  # instance attribute
        self.age = age

    def greet(self):
        print("Hello! My name is", self.name, "and I am", self.age, "years old")

# Creating objects
p1 = Person("Ayush", 20)
p2 = Person("Alice", 25)

p1.greet()
p2.greet()
print("Class attribute species:", p1.species, "\n")

print("‚úèÔ∏è  Accessing and Modifying Attributes")
print("‚û°Ô∏è Access instance attribute:", p1.name)
p1.age = 21
print("‚û°Ô∏è Modified age:", p1.age)
print("‚û°Ô∏è Access class attribute:", Person.species)
Person.species = "Human"
print("‚û°Ô∏è Modified class attribute:", p2.species, "\n")

print("üí°  Instance vs Class Attributes")
print("‚Ä¢ Instance attributes: unique per object")
print("‚Ä¢ Class attributes: shared among all instances")
print("‚Ä¢ Example:")
print("p1.name =", p1.name, ", p2.name =", p2.name)
print("p1.species =", p1.species, ", p2.species =", p2.species, "\n")

print("üîÑ  Methods in Depth")
print("‚û°Ô∏è Instance methods: use 'self', can access/modify instance attributes")
print("‚û°Ô∏è Class methods: use @classmethod and 'cls', can access/modify class attributes")
print("‚û°Ô∏è Static methods: use @staticmethod, no self or cls, utility functions\n")

class Student:
    school = "XYZ School"

    def __init__(self, name, marks):
        self.name = name
        self.marks = marks

    def show(self):
        print(self.name, "scored", self.marks)

    @classmethod
    def set_school(cls, new_school):
        cls.school = new_school

    @staticmethod
    def welcome():
        print("Welcome to the school!")

s1 = Student("Bob", 85)
s2 = Student("Charlie", 90)

s1.show()
Student.set_school("ABC School")
print("Updated school for s2:", s2.school)
Student.welcome()
print()

print("üåÄ  Inheritance")
print("‚Ä¢ Single inheritance: Child inherits from one parent")
print("‚Ä¢ Multi-level inheritance: Child inherits from parent, grandchild inherits from child")
print("‚Ä¢ Multiple inheritance: Child inherits from multiple parents\n")

class Animal:
    def speak(self):
        print("Some generic sound")

class Dog(Animal):
    def speak(self):
        print("Woof! Woof!")  # overriding parent method

dog = Dog()
dog.speak()
print()

print("üîê  Encapsulation")
print("‚Ä¢ Use _ or __ prefix to indicate protected/private attributes")
print("‚Ä¢ Access private attributes via methods")

class BankAccount:
    def __init__(self, balance):
        self.__balance = balance  # private

    def deposit(self, amount):
        self.__balance += amount

    def get_balance(self):
        return self.__balance

acc = BankAccount(1000)
acc.deposit(500)
print("Balance after deposit:", acc.get_balance(), "\n")

print("üìú  Special Methods (__str__, __repr__, __len__, __add__)")
class Book:
    def __init__(self, title, pages):
        self.title = title
        self.pages = pages

    def __str__(self):
        return f"Book: {self.title}, Pages: {self.pages}"

    def __len__(self):
        return self.pages

    def __add__(self, other):
        return self.pages + other.pages

b1 = Book("Python 101", 150)
b2 = Book("OOP Deep Dive", 200)

print(b1)
print("Length of b2:", len(b2))
print("Total pages of b1 + b2:", b1 + b2, "\n")

print("üß†  Polymorphism")
print("‚Ä¢ Ability to use same method on different objects/classes")
print("‚Ä¢ Example: speak() in Dog and Cat can behave differently but called similarly\n")

print("üéØ  Composition vs Aggregation")
print("‚Ä¢ Composition: has-a relationship, object contains another object")
print("‚Ä¢ Aggregation: has-a but independent lifecycle\n")

print("‚úÖ  Summary of Python OOP Concepts")
print("‚Ä¢ Class = blueprint, Object = instance")
print("‚Ä¢ Attributes = instance/class variables")
print("‚Ä¢ Methods = instance/class/static methods")
print("‚Ä¢ self = reference to current object")
print("‚Ä¢ Inheritance allows reusing code and overriding methods")
print("‚Ä¢ Encapsulation hides data (_ or __)")
print("‚Ä¢ Special methods allow custom behavior")
print("‚Ä¢ Polymorphism = same interface, different behavior")
print("‚Ä¢ Composition/Aggregation = relationships between objects")
print("‚Ä¢ Object lifetime managed by __init__ and __del__\n")

print("‚úÖ  End of detailed OOP notes ‚Äî covers everything from classes to polymorphism and special methods.")
